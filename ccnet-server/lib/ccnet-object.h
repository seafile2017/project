/* ccnet-object.h generated by valac 0.34.4, the Vala compiler, do not modify */


#ifndef __CCNET_OBJECT_H__
#define __CCNET_OBJECT_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define CCNET_TYPE_PROC (ccnet_proc_get_type ())
#define CCNET_PROC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_PROC, CcnetProc))
#define CCNET_PROC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_PROC, CcnetProcClass))
#define CCNET_IS_PROC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_PROC))
#define CCNET_IS_PROC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_PROC))
#define CCNET_PROC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_PROC, CcnetProcClass))

typedef struct _CcnetProc CcnetProc;
typedef struct _CcnetProcClass CcnetProcClass;
typedef struct _CcnetProcPrivate CcnetProcPrivate;

#define CCNET_TYPE_EMAIL_USER (ccnet_email_user_get_type ())
#define CCNET_EMAIL_USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_EMAIL_USER, CcnetEmailUser))
#define CCNET_EMAIL_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_EMAIL_USER, CcnetEmailUserClass))
#define CCNET_IS_EMAIL_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_EMAIL_USER))
#define CCNET_IS_EMAIL_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_EMAIL_USER))
#define CCNET_EMAIL_USER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_EMAIL_USER, CcnetEmailUserClass))

typedef struct _CcnetEmailUser CcnetEmailUser;
typedef struct _CcnetEmailUserClass CcnetEmailUserClass;
typedef struct _CcnetEmailUserPrivate CcnetEmailUserPrivate;

#define CCNET_TYPE_GROUP (ccnet_group_get_type ())
#define CCNET_GROUP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_GROUP, CcnetGroup))
#define CCNET_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_GROUP, CcnetGroupClass))
#define CCNET_IS_GROUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_GROUP))
#define CCNET_IS_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_GROUP))
#define CCNET_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_GROUP, CcnetGroupClass))

typedef struct _CcnetGroup CcnetGroup;
typedef struct _CcnetGroupClass CcnetGroupClass;
typedef struct _CcnetGroupPrivate CcnetGroupPrivate;

#define CCNET_TYPE_GROUP_USER (ccnet_group_user_get_type ())
#define CCNET_GROUP_USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_GROUP_USER, CcnetGroupUser))
#define CCNET_GROUP_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_GROUP_USER, CcnetGroupUserClass))
#define CCNET_IS_GROUP_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_GROUP_USER))
#define CCNET_IS_GROUP_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_GROUP_USER))
#define CCNET_GROUP_USER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_GROUP_USER, CcnetGroupUserClass))

typedef struct _CcnetGroupUser CcnetGroupUser;
typedef struct _CcnetGroupUserClass CcnetGroupUserClass;
typedef struct _CcnetGroupUserPrivate CcnetGroupUserPrivate;

#define CCNET_TYPE_ORGANIZATION (ccnet_organization_get_type ())
#define CCNET_ORGANIZATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_ORGANIZATION, CcnetOrganization))
#define CCNET_ORGANIZATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_ORGANIZATION, CcnetOrganizationClass))
#define CCNET_IS_ORGANIZATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_ORGANIZATION))
#define CCNET_IS_ORGANIZATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_ORGANIZATION))
#define CCNET_ORGANIZATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_ORGANIZATION, CcnetOrganizationClass))

typedef struct _CcnetOrganization CcnetOrganization;
typedef struct _CcnetOrganizationClass CcnetOrganizationClass;
typedef struct _CcnetOrganizationPrivate CcnetOrganizationPrivate;

#define CCNET_TYPE_PEER_STAT (ccnet_peer_stat_get_type ())
#define CCNET_PEER_STAT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CCNET_TYPE_PEER_STAT, CcnetPeerStat))
#define CCNET_PEER_STAT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), CCNET_TYPE_PEER_STAT, CcnetPeerStatClass))
#define CCNET_IS_PEER_STAT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CCNET_TYPE_PEER_STAT))
#define CCNET_IS_PEER_STAT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), CCNET_TYPE_PEER_STAT))
#define CCNET_PEER_STAT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CCNET_TYPE_PEER_STAT, CcnetPeerStatClass))

typedef struct _CcnetPeerStat CcnetPeerStat;
typedef struct _CcnetPeerStatClass CcnetPeerStatClass;
typedef struct _CcnetPeerStatPrivate CcnetPeerStatPrivate;

struct _CcnetProc {
	GObject parent_instance;
	CcnetProcPrivate * priv;
	gchar* _name;
	gint _ctime;
	gint _dtime;
};

struct _CcnetProcClass {
	GObjectClass parent_class;
};

struct _CcnetEmailUser {
	GObject parent_instance;
	CcnetEmailUserPrivate * priv;
};

struct _CcnetEmailUserClass {
	GObjectClass parent_class;
};

struct _CcnetGroup {
	GObject parent_instance;
	CcnetGroupPrivate * priv;
};

struct _CcnetGroupClass {
	GObjectClass parent_class;
};

struct _CcnetGroupUser {
	GObject parent_instance;
	CcnetGroupUserPrivate * priv;
};

struct _CcnetGroupUserClass {
	GObjectClass parent_class;
};

struct _CcnetOrganization {
	GObject parent_instance;
	CcnetOrganizationPrivate * priv;
};

struct _CcnetOrganizationClass {
	GObjectClass parent_class;
};

struct _CcnetPeerStat {
	GObject parent_instance;
	CcnetPeerStatPrivate * priv;
};

struct _CcnetPeerStatClass {
	GObjectClass parent_class;
};


GType ccnet_proc_get_type (void) G_GNUC_CONST;
CcnetProc* ccnet_proc_new (void);
CcnetProc* ccnet_proc_construct (GType object_type);
const gchar* ccnet_proc_get_peer_name (CcnetProc* self);
void ccnet_proc_set_peer_name (CcnetProc* self, const gchar* value);
const gchar* ccnet_proc_get_name (CcnetProc* self);
void ccnet_proc_set_name (CcnetProc* self, const gchar* value);
gint ccnet_proc_get_ctime (CcnetProc* self);
void ccnet_proc_set_ctime (CcnetProc* self, gint value);
gint ccnet_proc_get_dtime (CcnetProc* self);
void ccnet_proc_set_dtime (CcnetProc* self, gint value);
GType ccnet_email_user_get_type (void) G_GNUC_CONST;
CcnetEmailUser* ccnet_email_user_new (void);
CcnetEmailUser* ccnet_email_user_construct (GType object_type);
gint ccnet_email_user_get_id (CcnetEmailUser* self);
void ccnet_email_user_set_id (CcnetEmailUser* self, gint value);
const gchar* ccnet_email_user_get_email (CcnetEmailUser* self);
void ccnet_email_user_set_email (CcnetEmailUser* self, const gchar* value);
gboolean ccnet_email_user_get_is_staff (CcnetEmailUser* self);
void ccnet_email_user_set_is_staff (CcnetEmailUser* self, gboolean value);
gboolean ccnet_email_user_get_is_active (CcnetEmailUser* self);
void ccnet_email_user_set_is_active (CcnetEmailUser* self, gboolean value);
gint64 ccnet_email_user_get_ctime (CcnetEmailUser* self);
void ccnet_email_user_set_ctime (CcnetEmailUser* self, gint64 value);
const gchar* ccnet_email_user_get_source (CcnetEmailUser* self);
void ccnet_email_user_set_source (CcnetEmailUser* self, const gchar* value);
const gchar* ccnet_email_user_get_role (CcnetEmailUser* self);
void ccnet_email_user_set_role (CcnetEmailUser* self, const gchar* value);
const gchar* ccnet_email_user_get_password (CcnetEmailUser* self);
void ccnet_email_user_set_password (CcnetEmailUser* self, const gchar* value);
GType ccnet_group_get_type (void) G_GNUC_CONST;
CcnetGroup* ccnet_group_new (void);
CcnetGroup* ccnet_group_construct (GType object_type);
gint ccnet_group_get_id (CcnetGroup* self);
void ccnet_group_set_id (CcnetGroup* self, gint value);
const gchar* ccnet_group_get_group_name (CcnetGroup* self);
void ccnet_group_set_group_name (CcnetGroup* self, const gchar* value);
const gchar* ccnet_group_get_creator_name (CcnetGroup* self);
void ccnet_group_set_creator_name (CcnetGroup* self, const gchar* value);
gint64 ccnet_group_get_timestamp (CcnetGroup* self);
void ccnet_group_set_timestamp (CcnetGroup* self, gint64 value);
const gchar* ccnet_group_get_source (CcnetGroup* self);
void ccnet_group_set_source (CcnetGroup* self, const gchar* value);
GType ccnet_group_user_get_type (void) G_GNUC_CONST;
CcnetGroupUser* ccnet_group_user_new (void);
CcnetGroupUser* ccnet_group_user_construct (GType object_type);
gint ccnet_group_user_get_group_id (CcnetGroupUser* self);
void ccnet_group_user_set_group_id (CcnetGroupUser* self, gint value);
const gchar* ccnet_group_user_get_user_name (CcnetGroupUser* self);
void ccnet_group_user_set_user_name (CcnetGroupUser* self, const gchar* value);
gint ccnet_group_user_get_is_staff (CcnetGroupUser* self);
void ccnet_group_user_set_is_staff (CcnetGroupUser* self, gint value);
GType ccnet_organization_get_type (void) G_GNUC_CONST;
CcnetOrganization* ccnet_organization_new (void);
CcnetOrganization* ccnet_organization_construct (GType object_type);
gint ccnet_organization_get_org_id (CcnetOrganization* self);
void ccnet_organization_set_org_id (CcnetOrganization* self, gint value);
const gchar* ccnet_organization_get_email (CcnetOrganization* self);
void ccnet_organization_set_email (CcnetOrganization* self, const gchar* value);
gint ccnet_organization_get_is_staff (CcnetOrganization* self);
void ccnet_organization_set_is_staff (CcnetOrganization* self, gint value);
const gchar* ccnet_organization_get_org_name (CcnetOrganization* self);
void ccnet_organization_set_org_name (CcnetOrganization* self, const gchar* value);
const gchar* ccnet_organization_get_url_prefix (CcnetOrganization* self);
void ccnet_organization_set_url_prefix (CcnetOrganization* self, const gchar* value);
const gchar* ccnet_organization_get_creator (CcnetOrganization* self);
void ccnet_organization_set_creator (CcnetOrganization* self, const gchar* value);
gint64 ccnet_organization_get_ctime (CcnetOrganization* self);
void ccnet_organization_set_ctime (CcnetOrganization* self, gint64 value);
GType ccnet_peer_stat_get_type (void) G_GNUC_CONST;
CcnetPeerStat* ccnet_peer_stat_new (void);
CcnetPeerStat* ccnet_peer_stat_construct (GType object_type);
const gchar* ccnet_peer_stat_get_id (CcnetPeerStat* self);
void ccnet_peer_stat_set_id (CcnetPeerStat* self, const gchar* value);
const gchar* ccnet_peer_stat_get_name (CcnetPeerStat* self);
void ccnet_peer_stat_set_name (CcnetPeerStat* self, const gchar* value);
const gchar* ccnet_peer_stat_get_ip (CcnetPeerStat* self);
void ccnet_peer_stat_set_ip (CcnetPeerStat* self, const gchar* value);
gboolean ccnet_peer_stat_get_encrypt (CcnetPeerStat* self);
void ccnet_peer_stat_set_encrypt (CcnetPeerStat* self, gboolean value);
gint64 ccnet_peer_stat_get_last_up (CcnetPeerStat* self);
void ccnet_peer_stat_set_last_up (CcnetPeerStat* self, gint64 value);
gint ccnet_peer_stat_get_proc_num (CcnetPeerStat* self);
void ccnet_peer_stat_set_proc_num (CcnetPeerStat* self, gint value);


G_END_DECLS

#endif
